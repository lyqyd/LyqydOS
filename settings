local unpack = unpack or table.unpack

local args = {...}

local winThemeSet = theme.getSet("window")
local deskThemeSet = theme.getSet("desktop")

local function findHook(event)
	local ref = process.eventHooks
	local _results = {}
	for i = 1, #event do
		if ref[event[i]] then
			if type(ref[event[i]]) == "table" then
				for k, v in pairs(ref[event[i]].__hooks) do
					_results[v] = true
				end
				ref = ref[event[i]]
			end
		end
	end
	local results = {}
	for k, v in pairs(_results) do
		table.insert(results, k)
	end
	return unpack(results)
end

local function setWindowTheme(newTheme)
	if newTheme ~= LyqydOS.window.theme and winThemeSet.themes[newTheme] then
		local oldTheme = LyqydOS.window.theme
		LyqydOS.window.theme = newTheme
		for pID, proc in pairs(process.list) do
			if proc and proc.windows then
				for i, win in ipairs(proc.windows) do
					if win.theme == oldTheme then
						win:setTheme(LyqydOS.window.theme)
						win:draw()
					end
				end
			end
		end
	end
end

local function setDesktopTheme(theme)
	if theme ~= LyqydOS.desktop.theme then
		if process.eventHooks.redraw then
			local dProc = process.getFromName("desktop")
			dProc:queue("set_property", "theme", theme)
			local event
			while true do
				event = {os.pullEvent()}
				if event[1] == "property_changed" then
					LyqydOS.desktop.theme = theme
					break
				elseif event[1] == "property_refused" then
					break
				end
			end
			dProc:queue("redraw")
		end
	end
end

if #args > 0 then
	if args[1] == "theme" then
		if #args == 3 then
			--check if second arg is "window" or "desktop" to specify *which* theme to set.
			if args[2] == "desktop" then
				setDesktopTheme(args[3])
			elseif args[2] == "window" then
				setWindowTheme(args[3])
			end
		else
			--try both!
			setWindowTheme(args[2])
			setDesktopTheme(args[2])
		end
	elseif args[1] == "background" then
		local dProc = process.getFromName("desktop")
		if dProc then
			local color = colors[args[2]] or colours[args[2]]
			local image = args[3] and shell.resolve(args[3])
			if color then
				dProc:queue("set_property", "background", color, image)
			else
				error("Invalid color specified")
			end
		else
			error("No desktop found")
		end
	end
elseif process and process.id() then
	--use interactive mode
	local newWindowTheme, newDesktopTheme = LyqydOS.window.theme, LyqydOS.desktop.theme
	local newDesktopBackground, newDesktopImage = LyqydOS.desktop.background, LyqydOS.desktop.backgroundImage
	local ephemeralWin, ephemeralWinMode
	local settingsProc = process.this()
	local win = process.getWindow()
	local winThemes, deskThemes, colorMap = {}, {}, {}
	for k, v in pairs(winThemeSet.themes) do table.insert(winThemes, k) end
	for k, v in pairs(deskThemeSet.themes) do table.insert(deskThemes, k) end
	win:setCaption("settings")
	--resize window to correct size
	local w = 47
	local h = 16
	if win.w ~= w or win.h ~= h then
		local maxX, maxY = win.target.getSize()
		win:move(math.min(win.x, maxX - w + 1), math.min(win.y, maxY - h + 1))
		win:resize(w, h)
	end
	win.resizable = false

	do
		local count = 0
		for i = 1, 5 do
			colorMap[i] = {}
			for j = 1, 3 do
				for k = 1, 4 do
					colorMap[i][4*(j - 1) + (j - 1) + k] = 2 ^ count
				end
				count = count + 1
			end
		end
		colorMap[6] = {colors.black, colors.black, colors.black, colors.black}
	end

	--establish captive compositor and captive window
	local captiveCompositor, captiveWin, canvas
	do
		captiveCompositor = compositor.new(win.redirect)
		captiveCompositor.deferDraw = true
		canvas = captiveCompositor:newBuffer()
		captiveWin = window.new(18, 6, 3, 4, "caption", captiveCompositor:newBuffer())
		captiveWin:setTheme(LyqydOS.window.theme)
		captiveWin:setType("window")
	end

	local function drawFakeDesktop()
		local function charToColor(char)
			return 2 ^ tonumber(char, 16)
		end
		do
			--redirect to buffer inside captive compositor
			local _old = term.redirect(canvas)
			local theme = deskThemeSet.themes[newDesktopTheme]

			do
				--draw title bar
				term.setCursorPos(2, 2)
				term.setTextColor(charToColor(theme.titlebar[2]))
				term.setBackgroundColor(charToColor(theme.titlebar[3]))
				term.write(theme.titlebar[1])
				term.setTextColor(charToColor(theme.ostext[2]))
				term.setBackgroundColor(charToColor(theme.ostext[3]))
				term.write("LyqydOS")
				term.setTextColor(charToColor(theme.titlebar[2]))
				term.setBackgroundColor(charToColor(theme.titlebar[3]))
				term.write(theme.titlebar[1])
				term.setTextColor(charToColor(theme.tasksep[2]))
				term.setBackgroundColor(charToColor(theme.tasksep[3]))
				term.write(theme.tasksep[1])
				term.setTextColor(charToColor(theme.tasktext[2]))
				term.setBackgroundColor(charToColor(theme.tasktext[3]))
				term.write("caption ")
				term.setTextColor(charToColor(theme.tasksep[2]))
				term.setBackgroundColor(charToColor(theme.tasksep[3]))
				term.write(theme.tasksep[1])
				term.setTextColor(charToColor(theme.titlebar[2]))
				term.setBackgroundColor(charToColor(theme.titlebar[3]))
				term.write(string.rep(theme.titlebar[1], 7))
			end
			do
				--draw background
				for i = 3, 11 do
					term.setCursorPos(2, i)
					term.setBackgroundColor(newDesktopBackground)
					term.write(string.rep(" ", 26))
				end
				if #newDesktopImage > 0 then
					local image = newDesktopImage
					local x, y = 26, 8
					local background = {}
					if fs.exists(image) then
						local handle = io.open(image, "r")
						if handle then
							for line in handle:lines() do
								table.insert(background, string.sub(line, 1, x))
							end
							handle:close()
						end
						local backColor = LyqydOS.desktop.background
						backColor = string.format("%x", math.floor(math.log(backColor) / math.log(2)))
						for i = 1, y do
							if background[i] then
								term.setCursorPos(2, i + 3)
								for j = 1, x do
									term.setBackgroundColor(charToColor(string.sub(background, j, j)))
									term.write(" ")
								end
							end
						end
					end
				end
			end
			if _old then
				term.redirect(_old)
			else
				term.restore()
			end
		end
		captiveWin:draw()
	end

	local function drawInterface()
		local colorLookup = {}
		for k, v in pairs(colors) do
			if type(k) == "string" and type(v) == "number" then
				colorLookup[v] = k
			end
		end

		local _old = term.redirect(canvas)
		do
			term.setCursorPos(29, 2)
			term.setTextColor(colors.white)
			term.setBackgroundColor(colors.gray)
			term.write("Window Theme")
			term.setCursorPos(29, 3)
			term.setBackgroundColor(colors.lightGray)
			term.setTextColor(colors.black)
			term.write(newWindowTheme..string.rep(" ", 15 - #newWindowTheme).."v")
		end
		do
			term.setCursorPos(29, 5)
			term.setTextColor(colors.white)
			term.setBackgroundColor(colors.gray)
			term.write("Desktop Theme")
			term.setCursorPos(29, 6)
			term.setBackgroundColor(colors.lightGray)
			term.setTextColor(colors.black)
			term.write(newDesktopTheme..string.rep(" ", 15 - #newDesktopTheme).."v")
		end
		do
			term.setCursorPos(29, 8)
			term.setTextColor(colors.white)
			term.setBackgroundColor(colors.gray)
			term.write("Background Color")
			term.setCursorPos(29, 9)
			term.setBackgroundColor(colors.lightGray)
			term.setTextColor(colors.black)
			term.write(colorLookup[newDesktopBackground]..string.rep(" ", 15 - #colorLookup[newDesktopBackground]).."v")
		end
		--[[do
			term.setCursorPos(29, 11)
			term.setTextColor(colors.white)
			term.setBackgroundColor(colors.gray)
			term.write("Background Image")
			term.setCursorPos(29, 12)
			term.setBackgroundColor(colors.lightGray)
			term.setTextColor(colors.black)
			term.write(newDesktopImage..string.rep(" ", 15 - #newDesktopImage)..">")
		end--]]
		do
			term.setCursorPos(5, 13)
			term.setTextColor(colors.black)
			term.setBackgroundColor(colors.lightGray)
			term.write(" Revert ")
			term.setCursorPos(17, 13)
			term.write(" Apply ")
		end
		if _old then
			term.redirect(_old)
		else
			term.restore()
		end
	end

	local function redraw()
		local _old = term.redirect(canvas)
		term.setBackgroundColor(colors.gray)
		term.clear()
		if _old then
			term.redirect(_old)
		else
			term.restore()
		end
		drawFakeDesktop()
		drawInterface()
		captiveCompositor:draw()
	end

	while true do
		redraw()
		local event = {os.pullEvent()}
		local currentWindow = process.getWindow()
		if currentWindow == win then
			--logic for events in the main window
			if event[1] == "mouse_click" then
				if event[3] >= 29 and event[3] <= 44 then
					if event[4] == 3 then
						--clicked Window Theme drop-down
						ephemeralWinMode = "windowTheme"
						ephemeralWin = window.new(16, #winThemes + 2, win.x + 29, win.y + 2, "Choose Theme", process.compositor:newBuffer(process.id()))
						ephemeralWin.ephemeral = true
						ephemeralWin:setType("menu")
						ephemeralWin:setTheme(LyqydOS.window.theme)
						settingsProc:addWindow(ephemeralWin)
						local _old = term.redirect(ephemeralWin.redirect)
						do
							term.setCursorPos(1, 1)
							term.setTextColor(colors.white)
							term.setBackgroundColor(colors.gray)
							term.clear()
							for i = 1, #winThemes do
								if i < #winThemes then
									print(winThemes[i])
								else
									write(winThemes[i])
								end
							end
						end
						if _old then
							term.redirect(_old)
						else
							term.restore()
						end
					elseif event[4] == 6 then
						--clicked Desktop Theme drop-down
						ephemeralWinMode = "deskTheme"
						ephemeralWin = window.new(16, #deskThemes + 2, win.x + 29, win.y + 5, "Choose Theme", process.compositor:newBuffer(process.id()))
						ephemeralWin.ephemeral = true
						ephemeralWin:setType("menu")
						ephemeralWin:setTheme(LyqydOS.window.theme)
						settingsProc:addWindow(ephemeralWin)
						local _old = term.redirect(ephemeralWin.redirect)
						do
							term.setCursorPos(1, 1)
							term.setTextColor(colors.white)
							term.setBackgroundColor(colors.gray)
							term.clear()
							for i = 1, #deskThemes do
								if i < #deskThemes then
									print(deskThemes[i])
								else
									write(deskThemes[i])
								end
							end
						end
						if _old then
							term.redirect(_old)
						else
							term.restore()
						end
					elseif event[4] == 9 then
						--clicked Background Color drop-down
						ephemeralWinMode = "deskColor"
						ephemeralWin = window.new(16, 8, win.x + 29, win.y + 8, "Choose Color", process.compositor:newBuffer(process.id()))
						ephemeralWin.ephemeral = true
						ephemeralWin:setType("menu")
						ephemeralWin:setTheme(LyqydOS.window.theme)
						settingsProc:addWindow(ephemeralWin)
						local _old = term.redirect(ephemeralWin.redirect)
						do
							term.setCursorPos(1, 1)
							term.setBackgroundColor(colors.gray)
							term.clear()
							for i = 0, 15 do
								term.setBackgroundColor(2^i)
								term.write("    ")
								term.setBackgroundColor(colors.gray)
								term.write(" ")
								if i % 3 == 2 then
									local x, y = term.getCursorPos()
									term.setCursorPos(1, y + 1)
								end
							end
						end
						if _old then
							term.redirect(_old)
						else
							term.restore()
						end
					elseif event[4] == 12 then
						--clicked Background Image selection box
					end
				elseif event[4] == 13 then
					if event[3] >= 5 and event[3] <= 12 then
						--clicked Revert
						newWindowTheme, newDesktopTheme = LyqydOS.window.theme, LyqydOS.desktop.theme
						captiveWin:setTheme(newWindowTheme)
						newDesktopBackground, newDesktopImage = LyqydOS.desktop.background, LyqydOS.desktop.backgroundImage
					elseif event[3] >= 17 and event[3] <= 23 then
						--clicked Apply
						setWindowTheme(newWindowTheme)
						setDesktopTheme(newDesktopTheme)
						local dProc = process.getFromName("desktop")
						if dProc then
							dProc:queue("set_property", "background", newDesktopBackground, newDesktopImage)
							LyqydOS.desktop.background = newDesktopBackground
							LyqydOS.desktop.backgroundImage = newDesktopImage
						end

						--Edit the /LyqydOS/.config file to set preferences.
						local contents = {}
						local handle = io.open(fs.combine(LyqydOS.folderPath, ".config"), "r")
						if handle then
							for line in handle:lines() do
								table.insert(contents, line)
							end
							handle:close()
						end
						if #contents > 0 then
							for i = #contents, 1, -1 do
								local property, value = string.match(contents[i], "^%s*([^%s=]+)%s*=%s*([^%s=]+)")
								if property and value then
									if property == "LyqydOS.window.theme" or property == "LyqydOS.desktop.theme" or property == "LyqydOS.desktop.background" or property == "LyqydOS.desktop.backgroundImage" then
										table.remove(contents, i)
									end
								end
							end
						end
						table.insert(contents, 'LyqydOS.window.theme = "'..newWindowTheme..'"')
						table.insert(contents, 'LyqydOS.desktop.theme = "'..newDesktopTheme..'"')
						table.insert(contents, "LyqydOS.desktop.background = "..newDesktopBackground)
						--table.insert(contents, "LyqydOS.desktop.backgroundImage = "..newDesktopImage)
						handle = io.open(fs.combine(LyqydOS.folderPath, ".config"), "w")
						if handle then
							for _, line in ipairs(contents) do
								handle:write(line.."\n")
							end
							handle:close()
						end
					end
				end
			end
		elseif currentWindow == ephemeralWin then
			--logic for events in the current ephemeral window
			if ephemeralWinMode == "windowTheme" then
				--handle events for windowTheme ephemeral window
				if event[1] == "mouse_click" then
					newWindowTheme = winThemes[event[4]]
					captiveWin:setTheme(newWindowTheme)
					ephemeralWinMode = nil
					settingsProc:removeWindow(ephemeralWin)
				end
			elseif ephemeralWinMode == "deskTheme" then
				if event[1] == "mouse_click" then
					newDesktopTheme = deskThemes[event[4]]
					ephemeralWinMode = nil
					settingsProc:removeWindow(ephemeralWin)
				end
			elseif ephemeralWinMode == "deskColor" then
				if event[1] == "mouse_click" then
					if colorMap[event[4]][event[3]] then
						newDesktopBackground = colorMap[event[4]][event[3]]
						ephemeralWinMode = nil
						settingsProc:removeWindow(ephemeralWin)
					end
				end
			end
		end
	end
end
