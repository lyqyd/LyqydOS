list = {}
focus = nil
active = nil
compositor = {}
nullRedirect = framebuffer.new()
eventHooks = {}
local unpack = unpack or table.unpack

local function tablify(baseTable, keyTable)
	if #keyTable > 1 then
		local key = table.remove(keyTable, 1)
		if not baseTable[key] then
			baseTable[key] = {__hooks = {}}
		elseif type(baseTable[key]) ~= "table" then
			return false
		end
		return tablify(baseTable[key], keyTable)
	elseif #keyTable == 1 then
		if not baseTable[keyTable[1]] then
			baseTable[keyTable[1]] = {__hooks = {}}
		end
		return baseTable, keyTable[1]
	end
end

local directedEvents = {}

function getNextDirectedEvent()
	local pid, event
	if #directedEvents > 0 then
		pid, event = unpack(table.remove(directedEvents, 1))
	end
	return pid, event
end

function directedEventsWaiting()
	return #directedEvents > 0
end

local function changeHookActual(hookMask, val, add)
	local ref, key = tablify(process.eventHooks, hookMask)
	if ref then
		if add then
			ref[key].__hooks[val] = val
		else
			ref[key].__hooks[val] = nil
		end
	end
end

function addHook(hookMask)
	return changeHookActual(hookMask, process.id(), true)
end

function removeHook(hookMask)
	return changeHookActual(hookMask, process.id(), false)
end

function setFocus(num)
	focus = num
end

function id()
	if process.active and process.list[process.active] then
		return process.active
	else
		return nil, "No active process!"
	end
end

function this()
	if process.id() and process.list[process.id()] then
		return process.list[process.id()]
	else
		return nil, "No active process!"
	end
end

function next()
	for i = #process.compositor.bufferStack, 1, -1 do
		local buf = process.compositor.bufferStack[i]
		if buf.pid ~= process.focus then
			return buf.pid
		end
	end
end

function getFromPath(path)
	for pID, proc in ipairs(process.list) do
		if proc and proc.path == path then
			return proc
		end
	end
end

function getFromName(name)
	for pID, proc in ipairs(process.list) do
		if proc and proc.name == name then
			return proc
		end
	end
end

local Process = {
	resume = function(self, event)
		--evaluate whether this event should even go to this process.
		if self.listening then
			local resumeProcess = false
			for i=1, #self.listening do
				if event[1] == self.listening[i] then
					resumeProcess = true
					self.listening = nil
					break
				end
			end
			if not resumeProcess then return unpack(event) end
		end

		local active = process.active
		process.active = self.id

		self:pre(event)

		--redirect to process' current target.
		local _old = term.redirect(self.redirect)
		local passback = {coroutine.resume(self.thread, unpack(event))}
		self.redirect = term.current()
		term.redirect(_old)

		self:post(passback)
		--process.compositor:draw()
		
		process.active = active

		--handle filters being sent back in passback.
		if passback[1] and passback[2] then
			if type(passback[2]) == "string" then
				self.listening = {passback[2]}
			elseif type(passback[2]) == "table" then
				self.listening = passback[2]
			end
		end

		--former checkProcess function.
		if not self:check() then
			self:kill()
		end

		return unpack(passback, 2)
	end,
	check = function(self)
		if coroutine.status(self.thread) == "dead" then
			return false
		end
		return true
	end,
	queue = function(self, ...)
		table.insert(directedEvents, {self.id, {...}})
		return true
	end,
	kill = function(self)
		--intended to be overriden for cleanup purposes by the UI system.
		self:remove()
		return true
	end,
	remove = function(self)
		process.list[self.id] = false
		process.compositor:removePid(self.id)
		if self.id == process.focus then
			process.focus = process.next()
		end
	end,
	setup = function(self, ...)
		--intended to be overriden for setup purposes.
	end,
	pre = function(self, event)
		--intended to be overriden for extensions
	end,
	post = function(self, passback)
		--intended to be overriden for extensions
	end,
}

local pmeta = {__index = Process}

function new(func, path, redirect, ...)
	local proc = {
		thread = coroutine.create(func),
		path = path,
		name = fs.getName(path),
	}

	table.insert(process.list, proc)
	proc.id = #process.list

	if redirect then
		proc.redirect = redirect
	else
		proc.redirect = process.nullRedirect
	end

	proc.firstRedirect = proc.redirect

	setmetatable(proc, pmeta)

	proc:setup(path, redirect, ...)

	proc:resume({})
	return proc
end
